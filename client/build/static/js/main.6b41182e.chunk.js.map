{"version":3,"sources":["Header.js","Login.js","TeamSelect.js","Standings.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","id","BrowserRouter","Link","to","style","marginRight","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","fetch","then","res","json","username","setState","passwordFeedback","user","state","post","console","log","_this2","onSubmit","type","value","onChange","target","marginLeft","Component","TeamSelect","Standings","Main","Route","exact","path","component","App","src_Header_0","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b41182e.chunk.js","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\nimport './Header.css';\n\nconst Header = () => (\n  <header>\n    <span className=\"title\"><strong>\n      <span className=\"bordered\" id=\"one\">#</span>\n      <span className=\"bordered\" id=\"two\">5</span>\n      <span className=\"bordered\" id=\"three\">A</span>\n      <span className=\"bordered\" id=\"four\">L</span>\n      <span className=\"bordered\" id=\"five\">I</span>\n      <span className=\"bordered\" id=\"six\">V</span>\n      <span className=\"bordered\" id=\"seven\">E</span>\n    </strong></span>\n    <Router>\n      <span className=\"link\">\n          <span>\n            <Link to='/login' style={{marginRight:\"40px\"}}>Login</Link>\n          </span>\n          <span>\n            <Link to='/teamselect' style={{marginRight:\"40px\"}}>Select Teams</Link>\n          </span>\n          <span>\n            <Link to='/standings'>Standings</Link>\n          </span>\n      </span>\n    </Router>\n  </header>\n)\n\nexport default Header;","import React, { Component } from 'react';\nimport \"./Login.css\";\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      passwordFeedback: '',\n      user: '',\n      post: ''\n    }\n  }\n\n  componentDidMount() {\n    console.log('login page mounted')\n    // this.callApi()\n    //   .then(res => this.setState({ response: res.express }))\n    //   .catch(err => console.log(err));\n  }\n\n  // callApi = async () => {\n  //   const response = await fetch('/api/hello');\n  //   const body = await response.json();\n  //   if (response.status !== 200) throw Error(body.message);\n  //   return body;\n  // };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    fetch('/api/password?password=' + e)\n      .then(res => res.json())\n      .then(username => {\n        if (username) {\n          this.setState({passwordFeedback: 'Accepted!'})\n        } else {\n          this.setState({passwordFeedback: 'No good!'})\n        }\n      })\n      .then(username => this.setState({ user: username }))\n  };\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <div id=\"logincontainer\">\n        <div id=\"containercontents\" />\n          <p><strong>Come get some nice #5ALIVE</strong></p>\n            <form onSubmit={this.handleSubmit}>\n              <p>Enter password:</p>\n              <input\n                type=\"text\"\n                value={this.state.post}\n                onChange={e => this.setState({ post: e.target.value })}\n              />\n              <button type=\"submit\" style={{marginLeft:\"10px\"}}>Submit</button>\n            </form>\n          <p>{this.state.passwordFeedback}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;","import React from 'react';\n\nconst TeamSelect = () => (\n    <div>\n    Hello\n    </div>\n)\n\nexport default TeamSelect;","import React from 'react';\n\nconst Standings = () => (\n  <standings>\n    <div>\n    </div>\n  </standings>\n)\n\nexport default Standings;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Login from './Login';\nimport TeamSelect from './TeamSelect';\nimport Standings from './Standings';\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <main>\n        <Router>\n          <div>\n            <Route exact path='/' component={Login}/>\n            <Route path='/teamselect' component={TeamSelect}/>\n            <Route path='/standings' component={Standings}/>\n          </div>\n        </Router>\n      </main>\n    )\n  }\n}\n\n export default Main;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Main from './Main';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Main />\n      </div>\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}